# ooooooooooooo                                           
# 8'   888   `8                                           
#      888      ooo. .oo.  .oo.   oooo  oooo  oooo    ooo 
#      888      `888P"Y88bP"Y88b  `888  `888   `88b..8P'  
#      888       888   888   888   888   888     Y888'    
#      888       888   888   888   888   888   .o8"'88b   
#     o888o     o888o o888o o888o  `V88V"V8P' o88'   888o 
                                                        
# COMPATABILITY {{{

set -g default-terminal "${TERM}"

# }}}
# MISC OPTIONS {{{

set -g detach-on-destroy off  # open existing session when closing last window
set -s escape-time 0          # remove delay for escape
set -g status-keys emacs      # allows esc key to exit commandline mode
set -g renumber-windows on    # stop new tabs appearing behind last
set -g history-limit 10000    # store 10,000 lines of scrollback

# }}}
# MOUSE {{{

set -g mouse on
unbind -n DoubleClick1Pane # stop double click leaking through program
unbind -n MouseDown3Pane   # remove default right-click context menu
bind -n MouseDown2Pane if -F "#{mouse_any_flag}" "send-keys -M MouseDown2" pasteb

# }}}
# TITLE {{{

set -g set-titles on
set -g set-titles-string "#T"

# }}}
# POPUP WINDOWS {{{

set -g popup-border-style "fg=colour236"
set -g pane-border-style "fg=colour236"
set -g pane-active-border-style 'fg=colour236'
set -g popup-border-lines single

# }}}
# STATUS LINE {{{

set -g status-interval 30
set -g status-style ""
set -g message-style "bg=colour234"
set -g message-command-style "bg=colour234"

quote_regex="s/'/'\"'\"'/"
window_details="'#{W:#{$quote_regex:window_name}#,}' '#{active_window_index}'"
pane_details="'#{$quote_regex:pane_title}' '#{$quote_regex:pane_current_path}'"
session_details="'#{$quote_regex:session_name}' '#{client_width}'"
status_props="$pane_details $window_details $session_details #{window_zoomed_flag}"
status="~/.config/tmux/status $status_props"
set -g status-format[0] "#($status -1)"
bind -n MouseDown1StatusDefault run "$status '#{mouse_x}'"

# }}}
# MODE STYLE {{{

set -g mode-style 'fg=terminal,bg=colour235'

# }}}
# SEARCH STYLE {{{

set -g copy-mode-match-style 'bg=colour234'
set -g copy-mode-current-match-style 'fg=brightyellow,bg=colour234'
set -g copy-mode-mark-style 'fg=black,bg=white'

# }}}
# KEYBINDS {{{

unbind-key -a

set -g prefix M-g
set-window-option -g mode-keys vi

# NAVIGATION
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|l?n?vim?x?)(diff)?$'"
bind-key -n 'M-h' if-shell "$is_vim" 'send-keys M-h' 'select-pane -L'
bind-key -n 'M-j' if-shell "$is_vim" 'send-keys M-j' 'select-pane -D'
bind-key -n 'M-k' if-shell "$is_vim" 'send-keys M-k' 'select-pane -U'
bind-key -n 'M-l' if-shell "$is_vim" 'send-keys M-l' 'select-pane -R'

# KILL
bind -n 'M-w' if-shell "$is_vim" 'send-keys Escape g C-w q' 'killp'
bind -n 'M-W' killp

# ZOOM
bind -n M-z resize-pane -Z

# RESIZING
bind -n M-H resize-pane -L 5
bind -n M-J resize-pane -D 5
bind -n M-K resize-pane -U 5
bind -n M-L resize-pane -R 5
bind -n M-Y resize-pane -L
bind -n M-U resize-pane -D
bind -n M-I resize-pane -U
bind -n M-O resize-pane -R

# SWAPPING
bind h splitw -fhb \; swapp -t ! \; killp -t !
bind j splitw -fv  \; swapp -t ! \; killp -t !
bind k splitw -fvb \; swapp -t ! \; killp -t !
bind l splitw -fh  \; swapp -t ! \; killp -t !
bind M-h splitw -fhb \; swapp -t ! \; killp -t !
bind M-j splitw -fv  \; swapp -t ! \; killp -t !
bind M-k splitw -fvb \; swapp -t ! \; killp -t !
bind M-l splitw -fh  \; swapp -t ! \; killp -t !

# SPLITTING
bind -n M-n split-window -h -c "#{pane_current_path}"
bind -n M-b split-window -v -c "#{pane_current_path}"
bind M-b break-pane

# NAVIGATING TABS (ctrl/ctrl+shift + tab)
set -s user-keys[0] "\e[1;5I"
set -s user-keys[1] "\e[1;6I"
set -s user-keys[2] "\e[5;6~"
set -s user-keys[3] "\e[6;6~"

bind -n User0 next-window
bind -n User1 previous-window
bind -n M-, next-window
bind -n M-m previous-window

# SWAPPING TABS (ctrl+shift + pageup/pagedown)
bind -n User2 swap-window -t -1 \; previous-window
bind -n User3 swap-window -t +1 \; next-window

# COPY MODE
bind -n M-v copy-mode
bind -n M-Escape copy-mode
bind -T copy-mode-vi a send -X cancel
bind -T copy-mode-vi u send -X halfpage-up
bind -T copy-mode-vi d send -X halfpage-down
bind -T copy-mode-vi M-u send -X halfpage-up
bind -T copy-mode-vi M-d send -X halfpage-down
bind -T copy-mode-vi v send -X begin-selection
bind -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe "pbcopy"
bind -T copy-mode-vi y send-keys -X copy-pipe "pbcopy"
bind -T copy-mode-vi Escape if-shell -F '#{selection_present}' \
                                        'send-keys -X clear-selection' \
                                        'send-keys -X cancel'
bind -T copy-mode-vi g switch-client -T visual-g

bind -T visual-g g send -X history-top
bind -T visual-g h send -X start-of-line
bind -T visual-g l send -X end-of-line

bind -T visual-g m send -X next-matching-bracket

bind -T copy-mode-vi / command-prompt -T search -i -p "/" \
    "send -X search-forward-incremental \"%%%\""
bind -T copy-mode-vi ? command-prompt -T search -i -p "?" \
    "send -X search-backward-incremental \"%%%\""

bind -n M-/ copy-mode \; command-prompt -T search -i -p "/" \
    "send -X search-forward-incremental \"%%%\""
bind -n M-? copy-mode \; command-prompt -T search -i -p "?" \
    "send -X search-backward-incremental \"%%%\""

# stop mouse from exiting copy mode
bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-selection -x

not_popup='#{!=:#S,popup}'

# SCROLL
bind -n M-u copy-mode \; send -X halfpage-up
bind -n M-d copy-mode \; send -X halfpage-down

# MISC
bind -n M-: command-prompt
bind    M-s source ~/.config/tmux/tmux.conf
bind -n M-p if -F $not_popup 'switch-client -l'
bind -n M-t if -F $not_popup 'new-window -c "#{session_path}"'
bind    M-f if -F $not_popup 'choose-tree -s -Z'

bind    M   if -F $not_popup 'command-prompt -I "move-window -t "'
bind    m   if -F $not_popup 'command-prompt -I "join-pane -t "'

bind    R   if -F $not_popup 'command-prompt -I "rename-session "'
bind    r   if -F $not_popup 'command-prompt -I "rename-window "'

# POPUP WINDOWS
bind    M-w run ~/.config/tmux/popup-wpm.sh
bind    M-p run ~/.config/tmux/popup-python.sh
bind    M-g run ~/.config/tmux/popup-scratch.sh
bind -n M-f if -F $not_popup 'run ~/.config/tmux/popup-switch-session.sh'
bind    M-t if -F $not_popup 'run "~/.config/tmux/popup-terminal.sh zsh"'

# }}}

# vim: foldmethod=marker
